import os
from glob import glob
import matplotlib.pyplot as plt
import xml.etree.ElementTree as ET
from mapper.mapper import *
from nlp.preprocessor import pre_process
import config
import numpy as np
from mapper.utils import bt2xml
from nlp.parser import get_embedding
from combiner.utils import bt2sentence

"""
    分别使用从veil_500中 500条 1000条 所有2000条 学习到的规则 对veil数据集进行行为树生成。 
    从而与lingua系统进行对比
"""
dataset_file = "test_experiments/veil_500/base.txt"


def get_memory_number():
    synonyms_number = 0
    for path in [config.dirs_tasks_reuse, config.dirs_controllers, config.dirs_conditions, config.dirs_actions]:
        bt_files = glob(os.path.join(path, '*'))
        for bt_file in bt_files:
            if bt_file.endswith('.xml'):
                try:
                    root = ET.parse(bt_file).getroot()[0]
                    if root.find('explanation') is not None:
                        synonyms_number += len(root.findall("explanation"))
                    if root.find('synonyms') is not None:
                        synonyms_number += len(root.findall("synonyms"))
                    if root.find("pattern") is not None:
                        synonyms_number += len(root.findall("pattern"))
                except Exception as e:
                    return "XML parse fail: " + " << " + bt_file + " >>" + str(e)
    return synonyms_number


def get_pattern_number():
    pattern_number = 0
    try:
        root = ET.parse(config.dir_unambiguous_rules).getroot()
        if root.find('rule') is not None:
            pattern_number += len(root.findall('rule'))
    except Exception as e:
        return "XML parse fail: " + " << " + config.dir_unambiguous_rules + " >>" + str(e)
    return pattern_number


def get_steps_number():
    pattern_number = 0
    try:
        root = ET.parse(config.dir_ambiguous_rules).getroot()
        if root.find('rule') is not None:
            pattern_number += len(root.findall('rule'))
    except Exception as e:
        return "XML parse fail: " + " << " + config.dir_ambiguous_rules + " >>" + str(e)
    return pattern_number


def get_memory_count(reuse_infos, controller_infos, condition_infos, action_infos):
    memory_count = 0
    all_infos = [reuse_infos, controller_infos, condition_infos, action_infos]
    for infos in all_infos:
        for info in infos:
            if info.get('bt_explanation') is not None:
                memory_count += 1
            if info.get('synonyms') is not None:
                memory_count += len(info['synonyms'])
            if info.get('pattern') is not None:
                memory_count += len(info['pattern'])
    return memory_count


def experiment():
    with open(dataset_file, 'r') as file:
        unambiguous_infos, ambiguous_infos, reuse_infos, controller_infos, condition_infos, action_infos = pre_process()
        last_result = {"test_count": 0,
                       "all_rule_number": [],
                       "ambiguous_rule_number": [],
                       "memory_rule_number": [],
                       "ambiguous_parse_count": 0,
                       "ambiguous_no_parse": []}
        # 所有指令当成等级三来处理
        count = 0
        for instruction in file:
            count += 1
            if count <= 1000:
                continue
            # if count > 1000:
            #     break
            # instruction = instruction.strip()
            instruction = "task execution: " + instruction.strip()
            print("\n" + "*" * 30 + " NEXT INSTRUCTION  " + "*" * 80 + "\n")
            # STEP 1: 计算当前系统规则数量
            ambiguous_rule_number = len(ambiguous_infos)
            memory_rule_number = get_memory_count(reuse_infos, controller_infos, condition_infos, action_infos)
            all_rule_number = ambiguous_rule_number + memory_rule_number

            last_result["ambiguous_rule_number"].append(ambiguous_rule_number)
            last_result["memory_rule_number"].append(memory_rule_number)
            last_result["all_rule_number"].append(all_rule_number)
            # STEP 2: 计算当前测试数量
            last_result["test_count"] += 1

            # STEP 3: 调用 instruction2bt 函数
            print("#" * 30 + "   CHATGBT INFO:   " + "#" * 80)
            message = BtMessage(instruction=instruction, use_llm=False,
                                unambiguous_infos=unambiguous_infos, ambiguous_infos=ambiguous_infos,
                                reuse_infos=reuse_infos, controller_infos=controller_infos,
                                condition_infos=condition_infos, action_infos=action_infos)
            message = instruction2bt(message)
            print("#" * 30 + "   CHATGBT INFO:   " + "#" * 80)
            # STEP 4 查看 instruction2bt 的能力，是否能生成行为树。生成行为树是否正确两种
            print("DATASET INSTRUCTION: " + instruction)
            if message.code != Status.OK.value:
                last_result["ambiguous_no_parse"].append(instruction)
                continue
            last_result["ambiguous_parse_count"] += 1
            # STEP 5 打印所有结果
            """    
            {"test_count": 0, "all_rule_number": [], "ambiguous_rule_number": [],
             "memory_rule_number": [], "ambiguous_parse_count": 0, "ambiguous_no_parse": []}
            """
            print("." * 30 + "        RESULT:    " + "·" * 80)
            print("Test Count: " + str(last_result["test_count"]))

            print("  Ambiguous Rule Count: " + str(last_result["ambiguous_rule_number"][-1]))
            print("     Memory Rule Count: " + str(last_result["memory_rule_number"][-1]))
            print("        All Rule Count: " + str(last_result["all_rule_number"][-1]))
            print("      Ambiguous Parse Count: " + str(last_result["ambiguous_parse_count"]) +
                  "\t\t" + str(last_result["ambiguous_parse_count"] / last_result["test_count"] * 100) + "%")

            print("." * 30 + "        RESULT:    " + "·" * 80)
            unambiguous_infos = message.unambiguous_infos
            ambiguous_infos = message.ambiguous_infos
            reuse_infos = message.reuse_infos
            controller_infos = message.controller_infos
            condition_infos = message.condition_infos
            action_infos = message.action_infos

        # 打印规则数量趋势图
        print(str(last_result['ambiguous_rule_number']))

        # 打印失败的语句
        print("  Ambiguous Parse Fail Sentences:" + str(last_result["ambiguous_no_parse"]))


if __name__ == '__main__':
    experiment()
    # init->100
    # rules = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 13, 14, 15, 16, 17, 17, 18, 18, 19, 20, 21, 21, 21, 22, 23, 24, 25, 26, 27, 27, 28, 28, 29, 29, 29, 29, 30, 31, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 48, 49, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 60, 61, 62, 62, 62, 62, 63, 63, 63, 63, 63, 63, 63, 64, 65, 65, 65, 65, 66, 67, 68, 68]
    # 100->500
    # rules = [68, 68, 68, 69, 70, 71, 72, 72, 73, 73, 73, 74, 74, 74, 74, 75, 75, 75, 75, 76, 76, 76, 76, 76, 77, 78, 78, 79, 80, 81, 82, 82, 83, 84, 85, 86, 86, 86, 86, 86, 87, 87, 88, 88, 88, 89, 89, 89, 89, 89, 90, 90, 90, 90, 90, 90, 91, 91, 91, 91, 91, 92, 93, 94, 94, 95, 96, 97, 98, 99, 99, 100, 100, 100, 101, 101, 101, 102, 103, 104, 104, 105, 106, 107, 107, 108, 108, 109, 110, 111, 111, 111, 112, 112, 112, 112, 113, 113, 114, 115, 115, 115, 116, 116, 116, 116, 117, 117, 117, 118, 119, 119, 119, 120, 120, 120, 120, 121, 122, 123, 124, 124, 125, 126, 127, 128, 129, 129, 130, 130, 131, 132, 133, 133, 134, 134, 134, 134, 134, 134, 135, 136, 136, 136, 136, 137, 137, 137, 137, 138, 139, 140, 141, 141, 142, 143, 144, 145, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 147, 148, 148, 148, 148, 148, 148, 148, 149, 150, 151, 152, 152, 153, 154, 154, 155, 156, 156, 156, 156, 156, 156, 156, 156, 157, 157, 157, 157, 158, 158, 158, 158, 158, 158, 159, 159, 159, 160, 161, 161, 161, 162, 163, 164, 164, 165, 166, 166, 166, 166, 167, 167, 167, 167, 167, 167, 168, 168, 168, 168, 168, 168, 168, 168, 168, 169, 169, 169, 169, 170, 170, 170, 170, 171, 171, 171, 171, 172, 173, 173, 173, 173, 173, 173, 173, 173, 173, 174, 174, 174, 175, 176, 176, 176, 176, 176, 177, 177, 178, 179, 180, 181, 182, 182, 182, 182, 182, 183, 183, 184, 185, 185, 185, 186, 186, 187, 188, 189, 189, 189, 190, 190, 190, 190, 190, 190, 190, 191, 191, 192, 193, 193, 194, 194, 194, 195, 196, 196, 197, 197, 197, 197, 197, 197, 197, 198, 198, 198, 199, 200, 201, 202, 202, 203, 204, 204, 204, 204, 204, 204, 204, 205, 205, 205, 206, 207, 207, 207, 207, 207, 207, 207, 208, 209, 209, 209, 210, 210, 210, 210, 210, 210, 210, 211, 211, 211, 211, 211, 212, 212, 213, 213, 213, 213, 213, 214, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 216, 217, 217, 217, 218, 219, 219, 220, 221, 221, 222, 223, 223, 223, 223, 223, 223, 223, 223, 224, 224, 224]
    # 500->1000
    # rules = [224, 225, 225, 225, 226, 226, 226, 227, 228, 229, 230, 231, 232, 233, 233, 234, 234, 234, 234, 235, 235, 235, 235, 235, 235, 235, 236, 236, 236, 237, 237, 237, 238, 238, 238, 238, 239, 239, 239, 239, 239, 240, 240, 240, 240, 240, 240, 240, 240, 240, 241, 241, 241, 241, 241, 241, 241, 242, 242, 242, 243, 243, 243, 244, 244, 244, 244, 244, 245, 245, 246, 246, 246, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 248, 249, 249, 249, 250, 250, 250, 251, 251, 252, 252, 252, 253, 253, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 256, 257, 257, 257, 257, 258, 258, 259, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 261, 261, 262, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 264, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 266, 266, 266, 266, 266, 266, 266, 267, 267, 267, 268, 268, 268, 269, 270, 270, 270, 270, 270, 270, 271, 271, 271, 272, 272, 272, 273, 274, 275, 275, 276, 276, 277, 277, 278, 278, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 280, 280, 281, 281, 281, 282, 283, 283, 283, 283, 283, 283, 283, 283, 284, 285, 286, 287, 287, 287, 287, 288, 289, 289, 290, 290, 290, 290, 291, 292, 292, 293, 294, 294, 294, 294, 294, 294, 294, 295, 295, 295, 296, 296, 297, 297, 298, 298, 298, 298, 299, 299, 299, 300, 300, 300, 300, 300, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 302, 302, 302, 302, 302, 302, 303, 304, 305, 305, 305, 305, 305, 305, 305, 306, 307, 307, 307, 307, 307, 307, 307, 308, 308, 308, 308, 308, 308, 308, 309, 309, 310, 311, 311, 311, 311, 311, 312, 312, 312, 312, 312, 312, 313, 313, 313, 313, 313, 314, 314, 315, 315, 315, 315, 315, 316, 316, 316, 316, 316, 316, 316, 317, 318, 318, 318, 318, 318, 318, 318, 318, 318, 319, 319, 319, 319, 319, 319, 319, 320, 320, 321, 321, 321, 321, 321, 322, 323, 324, 324, 325, 326, 326, 326, 326, 326, 327, 328, 329, 329, 329, 330, 330, 330, 331, 331, 332, 332, 333, 334, 334, 335, 335, 335, 336, 337, 337, 338, 338, 338, 339, 339, 339, 340, 340, 340, 340, 341, 341, 341, 341, 342, 343, 344, 345, 346, 347, 347, 348, 349, 350, 350, 350, 350, 350, 351, 352, 353, 353, 353, 354, 354, 354, 354, 355, 355, 356, 356, 356, 357, 358, 359, 359, 360, 361, 361, 361, 362, 363, 363, 364, 364, 364, 364, 364, 365, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 367, 368, 368, 368, 368, 369, 369, 369, 370, 370, 371, 371, 371, 371, 371, 371, 371, 371, 372, 372, 372]
    # 1000->all
    # rules = [372, 373, 373, 373, 374, 374, 375, 375, 375, 375, 375, 375, 376, 377, 377, 378, 378, 378, 378, 378, 379, 379, 379, 380, 380, 381, 381, 381, 381, 381, 381, 381, 381, 382, 382, 382, 383, 384, 384, 385, 386, 387, 387, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 389, 390, 390, 390, 390, 391, 391, 391, 391, 391, 392, 392, 393, 393, 394, 394, 394, 394, 394, 394, 394, 394, 395, 396, 396, 397, 397, 397, 397, 397, 397, 397, 397, 398, 398, 398, 398, 398, 399, 399, 399, 399, 400, 400, 400, 400, 400, 400, 401, 401, 401, 401, 401, 401, 401, 402, 403, 403, 403, 404, 405, 405, 405, 406, 407, 408, 409, 410, 410, 410, 410, 410, 411, 411, 412, 413, 414, 414, 414, 414, 415, 416, 417, 418, 419, 420, 421, 421, 422, 423, 423, 424, 425, 425, 425, 425, 425, 426, 426, 426, 426, 426, 426, 426, 427, 427, 427, 427, 427, 428, 428, 428, 428, 429, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 431, 432, 433, 433, 433, 433, 434, 434, 434, 435, 436, 437, 437, 437, 437, 438, 438, 439, 439, 439, 439, 439, 439, 440, 440, 441, 442, 443, 444, 445, 445, 445, 445, 446, 446, 447, 448, 448, 449, 450, 450, 450, 450, 450, 450, 451, 452, 452, 452, 453, 454, 455, 455, 455, 455, 456, 457, 457, 458, 459, 460, 460, 461, 461, 462, 462, 462, 463, 463, 463, 464, 464, 465, 466, 467, 468, 468, 469, 470, 471, 471, 472, 473, 474, 475, 476, 477, 477, 478, 478, 478, 479, 479, 479, 479, 480, 480, 481, 482, 483, 484, 484, 484, 484, 484, 485, 485, 485, 485, 486, 486, 487, 487, 488, 488, 488, 488, 488, 489, 490, 490, 490, 491, 491, 491, 491, 491, 492, 493, 494, 495, 496, 497, 497, 498, 498, 498, 499, 499, 500, 501, 501, 502, 503, 503, 503, 504, 505, 505, 505, 505, 506, 506, 507, 507, 507, 507, 507, 507, 507, 507, 508, 508, 508, 508, 509, 509, 510, 510, 510, 510, 511, 512, 513, 514, 515, 515, 516, 517, 518, 518, 519, 519, 519, 519, 519, 519, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 529, 530, 530, 530, 530, 531, 532, 533, 533, 533, 534, 534, 535, 536, 536, 536, 536, 536, 536, 537, 538, 539, 539, 540, 540, 541, 542, 542, 543, 544, 545, 546, 546, 546, 546, 546, 546, 546, 547, 548, 548, 548, 549, 550, 551, 552, 552, 553, 554, 554, 555, 556, 556, 556, 556, 557, 557, 558, 559, 560, 560, 560, 560, 560, 561, 561, 561, 561, 561, 561, 561, 561, 561, 562, 563, 564, 564, 564, 564, 564, 564, 565, 565, 566, 567, 567, 568, 568, 568, 568, 568, 569, 569, 569, 569, 570, 571, 572, 573, 574, 574, 575, 575, 575, 575, 575, 576, 577, 578, 579, 580, 580, 581, 582, 582, 583, 584, 584, 585, 586, 586, 587, 588, 589, 589, 589, 589, 590, 590, 590, 591, 591, 592, 593, 593, 593, 593, 593, 593, 593, 593, 594, 595, 596, 597, 598, 599, 599, 599, 599, 599, 600, 600, 601, 602, 602, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 604, 605, 605, 605, 606, 606, 607, 607, 607, 607, 608, 608, 608, 608, 608, 608, 609, 610, 611, 612, 613, 614, 614, 615, 615, 616, 616, 617, 617, 617, 618, 618, 619, 620, 620, 620, 621, 621, 622, 622, 622, 623, 623, 624, 624, 625, 626, 626, 626, 626, 626, 627, 627, 627, 628, 629, 629, 629, 629, 629, 629, 629, 629, 630, 630, 630, 630, 630, 630, 630, 630, 630, 630, 630, 630, 630, 630, 631, 631, 631, 631, 632, 633, 633, 634, 634, 634, 635, 636, 636, 636, 636, 636, 636, 636, 637, 638, 639, 639, 640, 641, 642, 643, 643, 644, 645, 645, 645, 646, 647, 647, 647, 647, 647, 648, 648, 648, 648, 648, 648, 648, 648, 649, 650, 651, 652, 653, 654, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 656, 656, 656, 656, 656, 656, 656, 656, 656, 657, 657, 657, 658, 658, 659, 659, 659, 659, 659, 659, 660, 660, 660, 660, 660, 661, 662, 662, 662, 662, 662, 662, 663, 663, 663, 664, 665, 666, 667, 668, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 670, 670, 670, 670, 670, 670, 671, 672, 672, 672, 673, 673, 674, 674, 674, 675, 675, 676, 677, 678, 679, 679, 680, 681, 681, 681, 681, 682, 682, 682, 683, 684, 684, 684, 684, 684, 684, 684, 684, 684, 684, 684, 685, 686, 686, 687, 687, 687, 687, 688, 688, 688, 689, 689, 690, 690, 691, 691, 691, 691, 691, 691, 691, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 693, 693, 693, 693, 693, 693, 694, 695, 695, 696, 697, 697, 698, 698, 698, 698, 698, 698, 698, 698, 698, 698, 698, 698, 698, 699, 700, 701, 702, 703, 703, 703, 703, 703, 703, 704, 704, 705, 705, 705, 705, 706, 707, 708, 708, 708, 709, 709, 709, 710, 710, 711, 712, 712, 712, 713, 714, 714, 714, 714, 714, 714, 714, 715, 715, 715, 716, 717, 717, 717, 717, 717, 717, 717, 717, 717, 718, 718, 719, 719, 719, 719, 719, 719, 719, 719, 719, 719, 719, 719, 720, 720, 720, 720, 720, 721, 722, 723, 723, 724, 724, 724, 725, 725, 726, 726, 726, 726, 726, 727, 727, 727, 727, 727, 728, 728, 728, 728, 728, 728, 728, 728, 729, 729, 729, 729, 730, 730, 730, 730, 731, 731, 732, 732, 733, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 736, 736, 736, 736, 736, 736, 736, 736, 736, 736, 736, 736, 736, 737, 737, 737, 737, 737, 738, 738, 738, 738, 738, 738, 738, 738, 738, 738, 738, 739, 739, 739, 739, 739, 739, 739, 739, 739, 739, 739, 739, 739, 739, 739, 739, 739, 740, 740, 740, 740, 740, 740, 741, 742, 743, 743, 744, 745, 745, 745, 745, 746, 746, 746, 746, 746, 746, 746, 747, 747, 748, 748, 749, 749, 750, 751, 752, 752, 752, 753, 754, 755, 756, 756, 756, 756, 757, 757, 757, 758, 758, 758, 758, 758, 758, 759, 760, 760, 761, 762, 762, 762, 762, 762, 763, 763, 763, 764, 764, 764, 764, 764, 765, 766, 766, 766, 766, 766, 766, 767, 767, 767, 767, 767, 767, 767, 767, 767, 767, 767, 767, 767, 767, 767, 767, 767, 767, 767, 767, 767, 767, 767, 767, 768, 768, 768, 768, 768, 768, 768, 768, 768, 768, 768, 768, 768, 768, 768, 768, 768, 768, 768, 768, 768, 768, 769, 769, 769, 769, 769, 769, 769, 769, 769, 769, 769, 769, 769, 769]

    # 4tasks->100
    rules = [108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 117, 118, 119, 120, 121, 122, 122, 123, 123, 124, 125, 126, 126, 126, 127, 128, 129, 130, 131, 132, 132, 133, 133, 134, 134, 134, 134, 135, 136, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 153, 154, 155, 156, 156, 156, 156, 156, 156, 156, 156, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 165, 166, 167, 167, 167, 167, 168, 168, 168, 168, 168, 168, 168, 169, 170, 170, 170, 170, 171, 172, 173, 173]
